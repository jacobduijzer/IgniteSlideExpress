@page "/"
@using IgniteSlideExpress.UI.ViewModels
@using System.ComponentModel
@using IgniteSlideExpress.Core

@inject SessionViewModel SessionViewModel

@implements IDisposable

<PageTitle>Ignite Slide Express</PageTitle>

<div class="container">

    
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Speaker</th>
            <th>Slides</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var talk in SessionViewModel.Session.Talks.Select((value, i) => new { i, value }))
        {
            <tr>
                <td>
                    <NavLink class="nav-link" href="@($"presentation/{talk.value.Id}")" target="_blank">
                        @talk.value.Title
                    </NavLink>
                </td>
                <td>@talk.value.Speaker</td>
                <td>@talk.value.NumberOfSlides</td>
                <td>
                    <div class="row">
                        <div class="col-sm">
                            @if (talk.i > 0)
                            {
                                <button class="oi-button-base oi-button-small oi--arrow-top" aria-hidden="true" @onclick="() => MoveUp(talk.value.Id)"></button>
                            }
                        </div>
                        <div class="col-sm">
                            @if (talk.i < SessionViewModel.Session.Talks.Count - 1)
                            {
                                <button class="oi-button-base oi-button-small oi--arrow-bottom" aria-hidden="true" @onclick="() => MoveDown(talk.value.Id)"></button>
                            }
                        </div>
                        <div class="col-sm">
                            <button class="oi-button-base oi-button-small oi--trash" aria-hidden="true" @onclick="() => Delete(talk.value.Id)"></button>
                        </div>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <EditForm Model=@_talk OnSubmit="FormSubmitted">
    <table>
        <tbody>
            <tr>
                <td>
                    <InputText @bind-Value="_talk.Title"/>
                </td>
                <td>
                    <InputText @bind-Value="_talk.Speaker"/>
                </td>
                <td>
                    <InputFile OnChange="@LoadFiles"/>
                </td>
                <td>
                    <input type="submit" value="Submit" class="btn btn-primary" disabled="@_isDisabled"/>
                </td>
            </tr>
            </tbody>
        </table>
    </EditForm>
</div>

@code {

    private readonly TalkDTO _talk = new();
    private readonly List<IBrowserFile> _loadedFiles = new();
    private bool _isDisabled = true;
    
    protected override async Task OnInitializedAsync()
    {
        SessionViewModel.PropertyChanged += SessionViewModelOnPropertyChanged;
        await SessionViewModel.LoadSession();
        
        await base.OnInitializedAsync();
    }

    private async void SessionViewModelOnPropertyChanged(object? sender, PropertyChangedEventArgs e) =>
        await InvokeAsync(StateHasChanged);

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        // TODO loader
        SessionViewModel.AddFiles(e.GetMultipleFiles().ToList());
        _isDisabled = false;
    }

    private async Task FormSubmitted()
    {
        // TODO loader
        await SessionViewModel.AddTalk(_talk.Title, _talk.Speaker);
    }
    
    private async Task MoveUp(Guid talkId) =>
        await SessionViewModel.ChangeTalkPosition(Direction.Up, talkId);
    
    private async Task MoveDown(Guid talkId) =>
        await SessionViewModel.ChangeTalkPosition(Direction.Down, talkId);

    private async Task Delete(Guid talkId) =>
        await SessionViewModel.DeleteTalk(talkId);
   
    public void Dispose() =>
        SessionViewModel.PropertyChanged -= SessionViewModelOnPropertyChanged;
}