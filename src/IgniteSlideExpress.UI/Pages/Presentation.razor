@page "/presentation/{TalkId:guid}"
@using IgniteSlideExpress.Domain
@inject ISessionRepository SessionRepository
@inject PresentationPlayer PresentationPlayer
@layout EmptyPageLayout

<PageTitle>Ignite Slide Express</PageTitle>

<div class="centered-grid">
    <table class="table-responsive-lg" id="presentationTable">
        <tbody>
        <tr>
            <td>
                <h1>@(_talk != null ? _talk.Title : string.Empty)</h1>
            </td>
        </tr>
        <tr>
            <td>
                <h2>@(_talk != null ? _talk.Speaker : string.Empty)</h2>
            </td>
        </tr>
        <tr>
            <td class="text-center">
                <button type="button" @onclick="() => Start()">Start</button>
                <button type="button" @onclick="() => Stop()">Stop</button>
            </td>
        </tr>
        </tbody>
    </table>
</div>

<br/>

@if (_showImage)
{
    <img class="presentationImage" src="@(_image)" alt="Presentation Images"/>
}

@code {

    [Parameter]
    public Guid? TalkId { get; set; }

    private Talk _talk;
    private string _image;
    private bool _showImage = false;

    protected override async Task OnInitializedAsync()
    {
        if (TalkId.HasValue && _talk == null)
        {
            var session = await SessionRepository.Load();
            _talk = session!.Talks.FirstOrDefault(x => x != null && x.Id.Equals(TalkId.Value));
            if (_talk == null)
                throw new Exception($"There is no talk with id {TalkId.Value}.");
        }
    }

    private void Start()
    {
        PresentationPlayer.Add(_talk);
        PresentationPlayer.SheetTimeElapsed += PresentationPlayerOnSheetTimeElapsed;

        _image = Path.Combine("/", "presentations", TalkId.ToString(), PresentationPlayer.CurrentImage) + $"?DummyId={DateTime.Now.Ticks}";
        _showImage = true;
        PresentationPlayer.Start();
    }

    private void Stop()
    {
        PresentationPlayer.Stop();
        PresentationPlayer.SheetTimeElapsed -= PresentationPlayerOnSheetTimeElapsed;

        _showImage = false;
    }

    private async void PresentationPlayerOnSheetTimeElapsed(object? sender, EventArgs e)
    {
        _image = Path.Combine("/", "presentations", TalkId.ToString(), PresentationPlayer.CurrentImage) + $"?DummyId={DateTime.Now.Ticks}";
        await InvokeAsync(StateHasChanged);
    }

}