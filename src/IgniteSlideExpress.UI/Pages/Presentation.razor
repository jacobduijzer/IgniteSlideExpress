@page "/presentation/{TalkId:guid}"
@using IgniteSlideExpress.UI.ViewModels
@using System.ComponentModel
@inject PresentationViewModel PresentationViewModel
@layout EmptyPageLayout
@implements IDisposable


<PageTitle>Ignite Slide Express</PageTitle>

<div class="centered-grid">
    <table class="table-responsive-lg table-bordered table-dark" id="presentationControls">
        <tbody>
        <tr>
            <td colspan="3">
                <h1>@(PresentationViewModel.Talk?.Title)</h1>
            </td>
        </tr>
        <tr>
            <td colspan="3">
                <h2>@(PresentationViewModel.Talk?.Speaker)</h2>
            </td>
        </tr>
        <tr>
            <td class="text-center">
                <button class="oi-button-base oi-button-large oi--media-skip-backward" @onclick="PreviousSlide" disabled="@(PresentationViewModel.PreviousButtonDisabled)"></button>
                <button class="oi-button-base oi-button-large oi--media-stop" @onclick="Stop" disabled="@(PresentationViewModel.StopButtonDisabled)"></button>
                <button class="oi-button-base oi-button-large oi--media-play" @onclick="Start" disabled="@(PresentationViewModel.PlayButtonDisabled)"></button>
                <button class="oi-button-base oi-button-large oi--media-skip-forward" @onclick="NextSlide" disabled="@(PresentationViewModel.NextButtonDisabled)"></button>
            </td>
            <td>@(PresentationViewModel.Talk?.CurrentSlideNumber) of @(PresentationViewModel.Talk?.NumberOfSlides)</td>
            <td></td>
        </tr>
        </tbody>
    </table>
</div>

<img class="presentationImage" src="@(PresentationViewModel.CurrentSlide)" alt="Presentation Images"/>

@code {

    [Parameter]
    public Guid? TalkId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PresentationViewModel.PropertyChanged += PresentationViewModelOnPropertyChanged;

        if (TalkId.HasValue)
        {
            await PresentationViewModel.Load(TalkId.Value);
        }

        await base.OnInitializedAsync();
    }

    private void Start() =>
        PresentationViewModel.Play();

    private void Stop() =>
        PresentationViewModel.Stop();

    private void PreviousSlide() =>
        PresentationViewModel.PreviousSlide();

    private void NextSlide() =>
        PresentationViewModel.NextSlide();

    private async void PresentationViewModelOnPropertyChanged(object? sender, PropertyChangedEventArgs e) =>
        await InvokeAsync(StateHasChanged);

    public void Dispose() =>
        PresentationViewModel.PropertyChanged -= PresentationViewModelOnPropertyChanged;

}