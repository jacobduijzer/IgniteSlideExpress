@page "/presentation/{TalkId:guid}"
@using IgniteSlideExpress.Domain
@inject ISessionRepository SessionRepository
@inject PresentationPlayer PresentationPlayer
@layout EmptyPageLayout

<PageTitle>Ignite Slide Express</PageTitle>

<div class="centered-grid">
    <table class="table-responsive-lg table-bordered" id="presentationControls">
        <tbody>
        <tr>
            <td colspan="3">
                <h1>@(_talk != null ? _talk.Title : string.Empty)</h1>
            </td>
        </tr>
        <tr>
            <td colspan="3">
                <h2>@(_talk != null ? _talk.Speaker : string.Empty)</h2>
            </td>
        </tr>
        <tr>
            <td class="text-center">
                <span class="oi-button-base oi-button-large oi--media-skip-backward" @onclick="PreviousSlide"></span>
                <span class="oi-button-base oi-button-large oi--media-pause"></span>
                <span class="oi-button-base oi-button-large oi--media-stop" @onclick="Stop"></span>
                <span class="oi-button-base oi-button-large oi--media-play" @onclick="Start"></span>
                <span class="oi-button-base oi-button-large oi--media-skip-forward" @onclick="NextSlide"></span>
            </td>
            <td>@(_talk != null ? $"{_talk.CurrentSlideNumber} of {_talk.NumberOfSlides}" : string.Empty)</td>
            <td></td>
        </tr>
        </tbody>
    </table>
</div>

<br/>

@if (_showImage)
{
    <img class="presentationImage" src="@(_image)" alt="Presentation Images"/>
}

@code {

    [Parameter]
    public Guid? TalkId { get; set; }

    private Talk _talk;
    private string _image;
    private bool _showImage = false;

    protected override async Task OnInitializedAsync()
    {
        if (TalkId.HasValue && _talk == null)
        {
            var session = await SessionRepository.Load();
            _talk = session!.Talks.FirstOrDefault(x => x != null && x.Id.Equals(TalkId.Value));
            if (_talk == null)
                throw new Exception($"There is no talk with id {TalkId.Value}.");
        }
    }

    private async Task Start()
    {
        PresentationPlayer.SheetTimeElapsed += PresentationPlayerOnSheetTimeElapsed;
        PresentationPlayer.Add(_talk);
        _image = Path.Combine("/", "presentations", TalkId.ToString(), PresentationPlayer.CurrentImage) + $"?DummyId={DateTime.Now.Ticks}";
        _showImage = true;
        await InvokeAsync(StateHasChanged);
        PresentationPlayer.Start();
    }

    private void Stop()
    {
        PresentationPlayer.Stop();
        PresentationPlayer.SheetTimeElapsed -= PresentationPlayerOnSheetTimeElapsed;

        _showImage = false;
    }

    private async Task PreviousSlide()
    {
        PresentationPlayer.Stop();
        PresentationPlayer.PreviousSlide();
        await UpdateSlide();
    }

    private async Task NextSlide()
    {
        PresentationPlayer.Stop();
        PresentationPlayer.NextSlide();
        await UpdateSlide();
    }

    private async void PresentationPlayerOnSheetTimeElapsed(object? sender, EventArgs e) =>
        await UpdateSlide();

    private async Task UpdateSlide()
    {
        _image = Path.Combine("/", "presentations", TalkId!.ToString(), PresentationPlayer.CurrentImage) + $"?DummyId={DateTime.Now.Ticks}";
        await InvokeAsync(StateHasChanged);
    }

}